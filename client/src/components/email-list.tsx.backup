import React, { useState, useMemo, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Skeleton } from "@/components/ui/skeleton";
import { useQuery } from "@tanstack/react-query";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Filter, SortDesc, Star, Paperclip, Trash2, Archive, Circle, CheckCircle, ChevronDown, MailOpen, Mail, Folder as FolderIcon, X, Check, Tag as TagIcon, Plus } from "lucide-react";
import { Checkbox } from "@/components/ui/checkbox";
import { formatDistanceToNow } from "date-fns";
import { useDrag } from "@use-gesture/react";
import { animated, useSpring } from "react-spring";
import EmailContextMenu from "./email-context-menu";
import { useIsMobile } from "@/hooks/use-mobile";
import { useLanguage } from "@/hooks/use-language";
import { useTags } from "@/hooks/use-tags";
import { useQueryClient } from "@tanstack/react-query";
import TagManagerDialog from "./tag-manager-dialog";
import type { Email, Folder as FolderType, Tag } from "@shared/schema";

// Email Tags Component - fetches tags via API
interface EmailTagsProps {
  emailId: number;
}

function EmailTags({ emailId }: EmailTagsProps) {
  const { data: emailTags = [] } = useQuery<Tag[]>({
    queryKey: ["/api/emails", emailId, "tags"],
    queryFn: async () => {
      const response = await fetch(`/api/emails/${emailId}/tags`);
      if (!response.ok) return [];
      return response.json();
    },
  });

  return (
    <>
      {emailTags.slice(0, 2).map((tag) => (
        <Badge 
          key={tag.id} 
          variant="outline" 
          className="text-xs"
          style={{ 
            backgroundColor: tag.color + '20', 
            color: tag.color,
            borderColor: tag.color + '40'
          }}
        >
          {tag.name}
        </Badge>
      ))}
    </>
  );
}

// Swipeable Email Item Component with gesture support
interface SwipeableEmailItemProps {
  email: Email;
  selectedEmail: Email | null;
  onEmailSelect: (email: Email) => void;
  onDelete: (email: Email) => void;
  onArchive: (email: Email) => void;
  onToggleStar: (emailId: number) => void;
  formatDate: (date: Date | null) => string;
  getAvatarContent: (email: Email) => string;
  getAvatarColor: (email: Email) => string;
  getTags: (email: Email) => string[];
  isSelected: boolean;
  isSelectionMode: boolean;
  onToggleSelection: (emailId: number) => void;
  onEnterSelectionMode: () => void;
  avatarShape: string;
}

function SwipeableEmailItem({
  email,
  selectedEmail,
  onEmailSelect,
  onDelete,
  onArchive,
  onToggleStar,
  formatDate,
  getAvatarContent,
  getAvatarColor,
  getTags,
  isSelected,
  isSelectionMode,
  onToggleSelection,
  onEnterSelectionMode,
  avatarShape
}: SwipeableEmailItemProps) {
  const [{ x }, api] = useSpring(() => ({ x: 0 }));
  const [isSwipeActive, setIsSwipeActive] = useState(false);
  const [swipeDirection, setSwipeDirection] = useState<'left' | 'right' | null>(null);
  const [hasSwiped, setHasSwiped] = useState(false);
  const [isPressed, setIsPressed] = useState(false);
  const [hasMoved, setHasMoved] = useState(false);
  const [longPressTimer, setLongPressTimer] = useState<NodeJS.Timeout | null>(null);
  const [timerCanceled, setTimerCanceled] = useState(false);
  // Independent selection system using native events
  const selectionTimer = useRef<NodeJS.Timeout | null>(null);
  const startPos = useRef<{ x: number; y: number } | null>(null);
  const isMobile = useIsMobile();

  const bind = useDrag(
    ({ active, movement: [mx], first, last, tap }) => {
      const swipeThreshold = isMobile ? 100 : 80;
      const moveThreshold = isMobile ? 50 : 10;
      const selectionThreshold = 8;

      if (first) {
        setIsPressed(true);
        setHasMoved(false);
        setHasSwiped(false);
      }

      if (tap) return;

      if (active) {
        // Always move the email visually when dragging
        api.set({ x: mx });
        
        if (Math.abs(mx) > moveThreshold && !hasMoved) {
          setHasMoved(true);
          setHasSwiped(true);
        }

        // Show swipe indicators
        if (Math.abs(mx) > swipeThreshold) {
          setIsSwipeActive(true);
          setSwipeDirection(mx > 0 ? 'right' : 'left');
        } else {
          setIsSwipeActive(false);
          setSwipeDirection(null);
        }
      } else if (last) {
        setIsPressed(false);
        
        if (hasMoved && Math.abs(mx) > moveThreshold) {
          const isSwipe = Math.abs(mx) > swipeThreshold;
          
          if (isSwipe) {
            const direction = mx > 0 ? 'right' : 'left';
            
            if (direction === 'right') {
              onArchive(email);
            } else {
              onDelete(email);
            }
          }
          
          api.start({ x: 0 });
          setIsSwipeActive(false);
          setSwipeDirection(null);
        } else {
          // User didn't move enough - handle as selection (only on mobile)
          if (isMobile && !isSelectionMode && Math.abs(mx) <= selectionThreshold) {
            onEnterSelectionMode();
            onToggleSelection(email.id);
          }
        }
        
        setTimeout(() => {
          setHasSwiped(false);
          setHasMoved(false);
        }, 150);
      }
    },
    {
      axis: "x",
      filterTaps: false,
      rubberband: true,
      threshold: 3,
      pointer: { mouse: true, touch: true }, // Enable both mouse and touch
      preventDefault: false
    }
  );





  // Native selection events (completely independent of swipe)
  const handlePointerDown = (e: React.PointerEvent) => {
    if (!isMobile || isSelectionMode) return;
    
    startPos.current = { x: e.clientX, y: e.clientY };
    console.log('Pointer down - starting selection timer');
    
    selectionTimer.current = setTimeout(() => {
      console.log('Selection timer completed - entering selection mode');
      onEnterSelectionMode();
      onToggleSelection(email.id);
      selectionTimer.current = null;
    }, 1000);
  };

  const handlePointerMove = (e: React.PointerEvent) => {
    if (!startPos.current || !selectionTimer.current) return;
    
    const deltaX = Math.abs(e.clientX - startPos.current.x);
    const deltaY = Math.abs(e.clientY - startPos.current.y);
    
    // Cancel if moved too much
    if (deltaX > 50 || deltaY > 50) {
      console.log('Too much movement - canceling selection');
      clearTimeout(selectionTimer.current);
      selectionTimer.current = null;
      startPos.current = null;
    }
  };

  const handlePointerUp = () => {
    if (selectionTimer.current) {
      clearTimeout(selectionTimer.current);
      selectionTimer.current = null;
    }
    startPos.current = null;
  };

  return (
    <animated.div
      {...bind()}
      style={{ 
        x,
        userSelect: 'none',
        WebkitUserSelect: 'none',
        touchAction: isMobile ? 'none' : 'auto'
      }}
      onPointerDown={isMobile ? handlePointerDown : undefined}
      onPointerMove={isMobile ? handlePointerMove : undefined}
      onPointerUp={isMobile ? handlePointerUp : undefined}

      onClick={(e) => {

        // Prevent email opening if user just swiped
        if (hasSwiped) {
          e.preventDefault();
          e.stopPropagation();
          return;
        }
        
        // Handle selection mode
        if (isSelectionMode) {
          onToggleSelection(email.id);
          return;
        }
        
        // Normal email opening
        onEmailSelect(email);
      }}
      onDoubleClick={() => {
        // Double-click to enter selection mode on desktop only
        if (!isMobile && !isSelectionMode) {
          onEnterSelectionMode();
          onToggleSelection(email.id);
        }
      }}

      className={`email-item border-b border-border p-4 cursor-pointer transition-all duration-200 relative select-none touch-pan-x overflow-hidden ${
        isSelected && isSelectionMode
          ? "bg-primary/10 border-l-4 border-l-primary"
          : selectedEmail?.id === email.id && !isSelectionMode
          ? "selected bg-muted border-l-4 border-l-primary"
          : "hover:bg-muted/50"
      }`}
    >
      {/* Swipe Action Indicators */}
      {isSwipeActive && swipeDirection === 'right' && (
        <div className="absolute inset-y-0 left-0 w-20 flex items-center justify-start pl-4 pointer-events-none bg-green-500/30 z-20">
          <Archive className="h-6 w-6 text-green-700 drop-shadow-lg" />
        </div>
      )}

      {isSwipeActive && swipeDirection === 'left' && (
        <div className="absolute inset-y-0 right-0 w-20 flex items-center justify-end pr-4 pointer-events-none bg-red-500/30 z-20">
          <Trash2 className="h-6 w-6 text-red-700 drop-shadow-lg" />
        </div>
      )}
      
      <div className="flex items-start space-x-3 relative z-10 bg-card/80 overflow-hidden min-w-0">
        <div 
          className={`avatar-container relative transition-all duration-200 ${
            isSelectionMode || !isMobile ? 'cursor-pointer' : ''
          } ${
            !isMobile && !isSelectionMode ? 'hover:ring-2 hover:ring-offset-2 hover:ring-primary/50 rounded-full hover:shadow-md' : ''
          }`}
          onClick={(e) => {
            if (isSelectionMode) {
              e.stopPropagation();
              onToggleSelection(email.id);
            } else if (!isSelectionMode && !isMobile) {
              // On desktop, single-click avatar enters selection mode and selects email
              e.stopPropagation();
              onEnterSelectionMode();
              onToggleSelection(email.id);
            }
          }}
        >
          {isSelected ? (
            <div 
              className={`w-full h-full bg-primary flex items-center justify-center ${
                avatarShape === 'square' ? 'rounded-lg' : 'rounded-full'
              }`}
              title={`Avatar shape: ${avatarShape}`}
            >
              <Check className="w-5 h-5 text-primary-foreground" />
            </div>
          ) : (
            <Avatar className={`w-full h-full ${avatarShape === 'square' ? 'rounded-lg' : ''}`}>
              <AvatarFallback 
                className={`w-full h-full bg-gradient-to-br ${getAvatarColor(email)} text-primary-foreground text-sm font-semibold flex items-center justify-center ${
                  avatarShape === 'square' ? 'rounded-lg' : ''
                }`}
                title={`Avatar shape: ${avatarShape}`}
                style={{ minWidth: '40px', minHeight: '40px', maxWidth: '40px', maxHeight: '40px' }}
              >
                {getAvatarContent(email)}
              </AvatarFallback>
            </Avatar>
          )}
        </div>
        
        <div className="flex-1 min-w-0">
          <div className="flex items-center justify-between mb-0.5">
            <p className={`text-sm truncate text-foreground ${email.isRead ? "font-normal" : "font-bold"}`}>
              {email.fromName || email.fromAddress}
            </p>
            <div className="flex items-center space-x-2 flex-shrink-0">
              {/* Tags */}
              <EmailTags emailId={email.id} />
              {/* Attachment icon as tag-style badge */}
              {email.hasAttachments && (
                <Badge variant="outline" className="text-xs px-2 py-0.5 flex items-center" title="Has attachment">
                  <Paperclip className="h-3 w-3" />
                </Badge>
              )}
              
              <Button
                variant="ghost"
                size="sm"
                onClick={(e) => {
                  e.stopPropagation();
                  onToggleStar(email.id);
                }}
                className={`p-1 h-6 w-6 ${
                  email.isStarred ? "text-yellow-500 hover:text-yellow-600" : "text-foreground/60 hover:text-yellow-400"
                }`}
                title={email.isStarred ? "Remove star" : "Add star"}
              >
                <Star 
                  className="h-3 w-3" 
                  fill={email.isStarred ? "currentColor" : "none"}
                  stroke="currentColor"
                />
              </Button>
              <span className="text-xs text-foreground/60 w-16 text-right">
                {formatDate(email.receivedAt)}
              </span>
            </div>
          </div>
          
          <p className={`text-sm truncate mb-0.5 ${email.isRead ? "text-muted-foreground font-normal" : "text-foreground font-bold"}`}>
            {email.subject}
          </p>
          
          <div className={`text-xs mb-1 flex-1 ${email.isRead ? "text-muted-foreground" : "text-foreground/60"}`}>
            <p className="line-clamp-2 overflow-hidden">
              {email.body}
            </p>
          </div>
          

        </div>
      </div>
    </animated.div>
  );
}

interface EmailListProps {
  emails: Email[];
  currentFolder: string;
  selectedEmail: Email | null;
  isLoading: boolean;
  folders: FolderType[];
  onEmailSelect: (email: Email) => void;
  onToggleStar: (emailId: number) => void;
  onDelete: (email: Email) => void;
  onArchive: (email: Email) => void;
  onMarkRead: (emailId: number, isRead: boolean) => void;
  onMoveToFolder: (emailId: number, folderId: number) => void;
  onCreateFolder: (name: string) => Promise<void>;
  onSendToJunk: (email: Email) => void;
  searchQuery: string;
}

export default function EmailList({
  emails,
  currentFolder,
  selectedEmail,
  isLoading,
  folders,
  onEmailSelect,
  onToggleStar,
  onDelete,
  onArchive,
  onMarkRead,
  onMoveToFolder,
  onCreateFolder,
  onSendToJunk,
  searchQuery,
}: EmailListProps) {
  const { t } = useLanguage();
  const { tags } = useTags(1); // Assuming userId = 1
  const queryClient = useQueryClient();
  const [sortBy, setSortBy] = useState<"date" | "sender" | "subject">("date");
  const [filterBy, setFilterBy] = useState<"all" | "unread" | "starred" | "attachments">("all");
  const [selectedEmails, setSelectedEmails] = useState<Set<number>>(new Set());
  const [isSelectionMode, setIsSelectionMode] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [emailsPerPage, setEmailsPerPage] = useState(() => 
    parseInt(localStorage.getItem('emailsPerPage') || '20')
  );
  const [avatarShape, setAvatarShape] = useState(() => 
    localStorage.getItem('avatarShape') || 'rounded'
  );
  const [showTagLimitDialog, setShowTagLimitDialog] = useState(false);
  const [showTagManagerDialog, setShowTagManagerDialog] = useState(false);
  const [tagOperationLoading, setTagOperationLoading] = useState<string | null>(null);

  // Listen for emails per page changes
  useEffect(() => {
    const handleEmailsPerPageChange = (event: CustomEvent) => {
      setEmailsPerPage(event.detail);
      setCurrentPage(1); // Reset to first page when changing emails per page
    };

    window.addEventListener('emailsPerPageChanged', handleEmailsPerPageChange as EventListener);
    
    return () => {
      window.removeEventListener('emailsPerPageChanged', handleEmailsPerPageChange as EventListener);
    };
  }, []);

  // Listen for avatar shape changes
  useEffect(() => {
    const handleAvatarShapeChange = (event: CustomEvent) => {
      console.log('Avatar shape changed to:', event.detail.shape);
      setAvatarShape(event.detail.shape);
    };

    window.addEventListener('avatarShapeChange', handleAvatarShapeChange as EventListener);
    
    return () => {
      window.removeEventListener('avatarShapeChange', handleAvatarShapeChange as EventListener);
    };
  }, []);

  // Debug current avatar shape
  useEffect(() => {
    console.log('Current avatar shape:', avatarShape);
  }, [avatarShape]);

  // Reset page when emails change
  useEffect(() => {
    setCurrentPage(1);
  }, [emails, searchQuery, currentFolder]);

  // Selection management functions
  const toggleEmailSelection = (emailId: number) => {
    const newSelected = new Set(selectedEmails);
    if (newSelected.has(emailId)) {
      newSelected.delete(emailId);
    } else {
      newSelected.add(emailId);
    }
    setSelectedEmails(newSelected);
    
    // Exit selection mode if no emails are selected
    if (newSelected.size === 0) {
      setIsSelectionMode(false);
    }
  };

  const selectAllEmails = () => {
    const allEmailIds = new Set(paginatedEmails.map(email => email.id));
    setSelectedEmails(allEmailIds);
    setIsSelectionMode(true);
  };

  const clearSelection = () => {
    setSelectedEmails(new Set());
    setIsSelectionMode(false);
  };

  // Bulk actions
  const handleBulkDelete = async () => {
    const promises = Array.from(selectedEmails).map(async (emailId) => {
      const email = emails.find(e => e.id === emailId);
      if (email) {
        await onDelete(email);
      }
    });
    await Promise.all(promises);
    clearSelection();
  };

  const handleBulkMoveToFolder = async (folderId: number) => {
    const promises = Array.from(selectedEmails).map(emailId => onMoveToFolder(emailId, folderId));
    await Promise.all(promises);
    clearSelection();
  };

  const handleBulkMarkRead = async (isRead: boolean) => {
    const promises = Array.from(selectedEmails).map(emailId => onMarkRead(emailId, isRead));
    await Promise.all(promises);
    clearSelection();
  };



  const handleBulkRemoveTags = async () => {
    console.log('Removing tags from emails:', Array.from(selectedEmails));
    const promises = Array.from(selectedEmails).map(async emailId => {
      const email = emails.find(e => e.id === emailId);
      if (email) {
        console.log(`Removing tags from email ${emailId}. Current tags:`, getTags(email));
        // Remove all tags by setting empty array
        const response = await fetch(`/api/email/${emailId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ tags: JSON.stringify([]) })
        });
        console.log(`Response for email ${emailId}:`, response.status, response.ok);
        if (!response.ok) {
          const errorText = await response.text();
          console.error(`Failed to remove tags from email ${emailId}:`, errorText);
          throw new Error('Failed to remove email tags');
        }
      }
    });
    await Promise.all(promises);
    // Refresh emails to show updated tags
    await queryClient.invalidateQueries();
    clearSelection();
  };



  // Filtering and sorting logic
  const filteredAndSortedEmails = useMemo(() => {
    let filtered = emails.filter((email) => {
      // Search functionality
      if (searchQuery) {
        const searchLower = searchQuery.toLowerCase();
        return (
          email.subject.toLowerCase().includes(searchLower) ||
          email.body.toLowerCase().includes(searchLower) ||
          email.fromName?.toLowerCase().includes(searchLower) ||
          email.fromAddress.toLowerCase().includes(searchLower) ||
          email.toAddress.toLowerCase().includes(searchLower)
        );
      }

      // Filter functionality
      switch (filterBy) {
        case "unread":
          return !email.isRead;
        case "starred":
          return email.isStarred;
        case "attachments":
          return email.hasAttachments;
        default:
          return true;
      }
    });

    // Sort functionality
    return filtered.sort((a, b) => {
      switch (sortBy) {
        case "sender":
          const senderA = a.fromName || a.fromAddress;
          const senderB = b.fromName || b.fromAddress;
          return senderA.localeCompare(senderB);
        case "subject":
          return a.subject.localeCompare(b.subject);
        case "date":
        default:
          return new Date(b.receivedAt || b.createdAt || 0).getTime() - new Date(a.receivedAt || a.createdAt || 0).getTime();
      }
    });
  }, [emails, searchQuery, filterBy, sortBy]);

  // Paginated emails
  const paginatedEmails = useMemo(() => {
    const startIndex = (currentPage - 1) * emailsPerPage;
    const endIndex = startIndex + emailsPerPage;
    return filteredAndSortedEmails.slice(startIndex, endIndex);
  }, [filteredAndSortedEmails, currentPage, emailsPerPage]);

  // Pagination calculations
  const totalPages = Math.ceil(filteredAndSortedEmails.length / emailsPerPage);
  const hasNextPage = currentPage < totalPages;
  const hasPreviousPage = currentPage > 1;



  const formatDate = (date: Date | null) => {
    if (!date) return "Unknown";
    const now = new Date();
    const emailDate = new Date(date);
    
    if (emailDate.toDateString() === now.toDateString()) {
      return emailDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    } else if (emailDate.getFullYear() === now.getFullYear()) {
      return emailDate.toLocaleDateString([], { month: 'short', day: 'numeric' });
    } else {
      return emailDate.toLocaleDateString([], { year: 'numeric', month: 'short', day: 'numeric' });
    }
  };

  const getAvatarContent = (email: Email) => {
    const name = email.fromName || email.fromAddress;
    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);
  };

  const getAvatarColor = (email: Email) => {
    const colors = [
      "from-purple-400 to-pink-400",
      "from-blue-400 to-indigo-400", 
      "from-green-400 to-teal-400",
      "from-yellow-400 to-orange-400",
      "from-red-400 to-pink-400",
      "from-indigo-400 to-purple-400"
    ];
    const hash = email.fromAddress.split('').reduce((a, b) => {
      a = ((a << 5) - a) + b.charCodeAt(0);
      return a & a;
    }, 0);
    return colors[Math.abs(hash) % colors.length];
  };

  const getTags = (email: Email) => {
    if (!email.tags) return [];
    try {
      return JSON.parse(email.tags);
    } catch {
      return [];
    }
  };

  const getAttachments = (email: Email) => {
    if (!email.attachments) return [];
    try {
      return JSON.parse(email.attachments);
    } catch {
      return [];
    }
  };

  if (isLoading) {
    return (
      <div className="flex-1 p-4">
        <div className="space-y-4">
          {[...Array(5)].map((_, i) => (
            <div key={i} className="flex items-start space-x-3 p-4 border-b">
              <Skeleton className="h-10 w-10 rounded-full" />
              <div className="flex-1 space-y-2">
                <Skeleton className="h-4 w-1/4" />
                <Skeleton className="h-4 w-3/4" />
                <Skeleton className="h-3 w-1/2" />
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  if (filteredAndSortedEmails.length === 0) {
    return (
      <div className="flex-1 flex items-center justify-center p-8">
        <div className="text-center">
          <div className="text-4xl mb-4">📧</div>
          <h3 className="text-lg font-medium mb-2">No emails found</h3>
          <p className="text-sm text-muted-foreground">
            {searchQuery 
              ? `No emails match "${searchQuery}"`
              : `No emails in ${currentFolder}`
            }
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="flex-1 flex flex-col overflow-x-hidden">
      {/* Toolbar */}
      <div className="p-4 border-b bg-card/50 backdrop-blur-sm">
        <div className="flex items-center justify-between gap-2 md:gap-4">
          {/* Email counter or selection input */}
          <div className="flex-1 md:flex-none flex justify-start">
            {isSelectionMode && selectedEmails.size > 0 ? (
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button 
                    variant="outline" 
                    size="sm" 
                    className="h-8 min-w-[140px] text-sm shadow-sm shadow-blue-500/10 ring-1 ring-blue-500/20 hover:shadow-md hover:shadow-blue-500/20 transition-all duration-900 animate-[pulse-subtle_3s_ease-in-out_infinite]"
                  >
                  Selected {selectedEmails.size} email{selectedEmails.size !== 1 ? 's' : ''}
                  <ChevronDown className="ml-2 h-3 w-3" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-48">
                <DropdownMenuItem onClick={() => handleBulkMarkRead(true)}>
                  <MailOpen className="mr-2 h-4 w-4" />
                  {t('markAsRead')}
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => handleBulkMarkRead(false)}>
                  <Mail className="mr-2 h-4 w-4" />
                  {t('markAsUnread')}
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuSub>
                  <DropdownMenuSubTrigger>
                    <FolderIcon className="mr-2 h-4 w-4" />
                    {t('moveToFolder')}
                  </DropdownMenuSubTrigger>
                  <DropdownMenuSubContent 
                    className="md:ml-0 -ml-20 max-w-[200px] md:max-w-none"
                  >
                    {folders.filter(f => f.type === "system" && f.systemType !== "sent" && f.systemType !== "drafts").map((folder) => (
                      <DropdownMenuItem
                        key={folder.id}
                        onClick={() => handleBulkMoveToFolder(folder.id)}
                        className="max-w-[180px] md:max-w-none"
                      >
                        <FolderIcon className="mr-2 h-4 w-4 flex-shrink-0" />
                        <span className="truncate">{folder.name}</span>
                      </DropdownMenuItem>
                    ))}
                    {folders.filter(f => f.type === "custom").length > 0 && (
                      <>
                        <DropdownMenuSeparator />
                        {folders.filter(f => f.type === "custom").map((folder) => (
                          <DropdownMenuItem
                            key={folder.id}
                            onClick={() => handleBulkMoveToFolder(folder.id)}
                            className="max-w-[180px] md:max-w-none"
                          >
                            <FolderIcon className="mr-2 h-4 w-4 flex-shrink-0" />
                            <span className="truncate">{folder.name}</span>
                          </DropdownMenuItem>
                        ))}
                      </>
                    )}
                  </DropdownMenuSubContent>
                </DropdownMenuSub>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={() => setShowTagManagerDialog(true)}>
                  <TagIcon className="mr-2 h-4 w-4" />
                  Gerenciar Tags
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={handleBulkDelete} className="text-[hsl(0deg_91.89%_45.55%)] hover:text-[hsl(0deg_91.89%_40%)]">
                  <Trash2 className="mr-2 h-4 w-4" />
                  {t('delete')}
                </DropdownMenuItem>
                <DropdownMenuItem onClick={clearSelection}>
                  <X className="mr-2 h-4 w-4" />
                  Cancelar
                </DropdownMenuItem>
              </DropdownMenuContent>
              </DropdownMenu>
            ) : (
              <div className="text-sm text-muted-foreground">
                {`${t('showing')} ${((currentPage - 1) * emailsPerPage) + 1}-${Math.min(currentPage * emailsPerPage, filteredAndSortedEmails.length)} ${t('of')} ${filteredAndSortedEmails.length} ${t('emails')}`}
              </div>
            )}
          </div>

          {/* Filter controls */}
          <div className="flex items-center gap-1 md:gap-2">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" size="sm" className="h-8 text-xs md:text-sm">
                  <SortDesc className="h-3 w-3 md:h-4 md:w-4 md:mr-2" />
                  <span className="hidden sm:inline">{t('sortBy')} {t(`${sortBy}Sort`)}</span>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent>
                <DropdownMenuItem onClick={() => setSortBy("date")}>
                  {t('sortByDate')}
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => setSortBy("sender")}>
                  {t('sortBySender')}
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => setSortBy("subject")}>
                  {t('sortBySubject')}
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>

            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" size="sm" className="h-8 text-xs md:text-sm">
                  <Filter className="h-3 w-3 md:h-4 md:w-4 md:mr-2" />
                  <span className="hidden sm:inline">{t('filter')}: {t(`${filterBy}Filter`)}</span>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent>
                <DropdownMenuItem onClick={() => setFilterBy("all")}>
                  {t('allEmails')}
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => setFilterBy("unread")}>
                  {t('unreadOnly')}
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => setFilterBy("starred")}>
                  {t('starredOnly')}
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => setFilterBy("attachments")}>
                  {t('withAttachments')}
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>
      </div>



      {/* Email List */}
      <div className="flex-1 overflow-auto overflow-x-hidden scroll-custom">
        {paginatedEmails.map((email) => (
          <EmailContextMenu
            key={email.id}
            email={email}
            folders={folders}
            onDelete={onDelete}
            onArchive={onArchive}
            onToggleStar={onToggleStar}
            onMarkRead={onMarkRead}
            onMoveToFolder={onMoveToFolder}
            onCreateFolder={onCreateFolder}
            onSendToJunk={onSendToJunk}
          >
            <SwipeableEmailItem
              email={email}
              selectedEmail={selectedEmail}
              onEmailSelect={onEmailSelect}
              onDelete={onDelete}
              onArchive={onArchive}
              onToggleStar={onToggleStar}
              formatDate={formatDate}
              getAvatarContent={getAvatarContent}
              getAvatarColor={getAvatarColor}
              getTags={getTags}
              isSelected={selectedEmails.has(email.id)}
              isSelectionMode={isSelectionMode}
              onToggleSelection={toggleEmailSelection}
              onEnterSelectionMode={() => setIsSelectionMode(true)}
              avatarShape={avatarShape}
            />
          </EmailContextMenu>
        ))}
      </div>

      {/* Pagination Controls */}
      {totalPages > 1 && (
        <div className="flex items-center justify-between p-4 border-t bg-background/95 backdrop-blur">
          <div className="text-sm text-muted-foreground">
            {t('pageOf').replace('{{current}}', currentPage.toString()).replace('{{total}}', totalPages.toString())}
          </div>
          
          <div className="flex items-center space-x-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
              disabled={!hasPreviousPage}
              className="h-8"
            >
              {t('previous')}
            </Button>
            
            <div className="flex items-center space-x-1">
              {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                let pageNum;
                if (totalPages <= 5) {
                  pageNum = i + 1;
                } else if (currentPage <= 3) {
                  pageNum = i + 1;
                } else if (currentPage >= totalPages - 2) {
                  pageNum = totalPages - 4 + i;
                } else {
                  pageNum = currentPage - 2 + i;
                }
                
                return (
                  <Button
                    key={pageNum}
                    variant={currentPage === pageNum ? "default" : "outline"}
                    size="sm"
                    onClick={() => setCurrentPage(pageNum)}
                    className="h-8 w-8 p-0"
                  >
                    {pageNum}
                  </Button>
                );
              })}
            </div>
            
            <Button
              variant="outline"
              size="sm"
              onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}
              disabled={!hasNextPage}
              className="h-8"
            >
              {t('next')}
            </Button>
          </div>
        </div>
      )}

      {/* Tag Limit Dialog */}
      <Dialog open={showTagLimitDialog} onOpenChange={setShowTagLimitDialog}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Limite de Tags Atingido</DialogTitle>
            <DialogDescription className="pt-2">
              Alguns emails já possuem 2 tags ou já têm a tag selecionada. 
              Cada email pode ter no máximo 2 tags.
            </DialogDescription>
          </DialogHeader>
          <div className="flex justify-end pt-4">
            <Button onClick={() => setShowTagLimitDialog(false)}>
              Entendi
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      {/* Tag Manager Dialog */}
      <TagManagerDialog
        open={showTagManagerDialog}
        onOpenChange={setShowTagManagerDialog}
        emailIds={Array.from(selectedEmails)}
        userId={1}
      />
    </div>
  );
}